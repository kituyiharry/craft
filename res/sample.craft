// this is a comment that will be skipped
// comm
// !*+-/=<> <= == // operators
// (*"Lorem ipsum dolor sit amet, consetetur sadipscing elitr"*)
// fun x =
//     while x = 100 { 
//         let g = 10001 = 12 + 112 * 999
//     }
// ;
// /** This is a multiline comment */
// fun g = 
// {
//     x + x * 1 mod 2
// };
// ( 500 - 100 * 11 ) / 12;
// printl ( -10 );
// (9 - (1 * (-9))) + 11.34;
// 9 + 1;
// 10 - 10;
// 2 * 2; 
// 4 / 4;
// 500 / 0;
// true != false;
// 100 == (99 + 1);
// printl "one"; printl true;
// printl "Hallo " + "World"; 
// printl 2 + 1; 
// var x = 1;
// var y = 1 + 231;
// var hallo = x <= y;
// printl hallo; 
// hallo = !hallo;
// 
// if ((hallo and x > 0) or (y < 1)) { 
//     printl "x is greater than 0";
// } else { 
//     printl "x is less than 0";
// }
// 

// var n = 10;
// 
// while (n >= 1)
// { 
//     print "n is ";
//     printl n;
//     n = n - 1;
// };


// printl "-----------------------------------";
// for (var i = 0; i < 10; i = i + 1) printl i;
// printl "-----------------------------------";
// 
// var a = 0;
// var i = 0;
// var temp;
// 
// // fibonacci
// for (var b = 1; a < 10000; b = temp + b) {
//   print i;
//   print "th fibonnaci number is ";
//   printl a;
//   temp = a;
//   i = i + 1;
//   a = b;
// }

// print "elapse is -> ";
// printl (now2 - now1);

fun sayHi(first, last) {
  var r = "Hi, " + first; 
  var s = r + " " + last + "!";
  return s;
}

fun count(n) {
  if (n > 1) count(n - 1);
  // env();
  printl n;
}

count(3);

var y = sayHi("Dear", "Reader");
printl y;

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

// f is declared in global scope!!
for (var i = 0; i < 10; i = i + 1) {
   print "fib "; print i; print " is "; printl fib(i);
}

 // print "I is "; print f;

// {
//     if (x > 0) { 
//        // initializer reuse error is considered an error in resolver!!
//         var x = x + 2223; 
//     }
//     print "x is ";
//     printl x;
//     {
//         x = x - 1;
//         print "now x is ";
//         printl x;
//     };
// };
// 
// print "and now x is ";
// printl x;
// 

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    printl i;
  }
  return count;
}

var counter = makeCounter();

counter(); // "1".
counter(); // "2".

print "i idx is still "; printl i;

fun factorial(n) {
    if (n == 0) {
        return 1;
    }
    return n * factorial(n - 1);
}

print "factorial 5 is ";
printl factorial(5);

var a = "global";
{
  var b = "block"; 
  fun showA() {
   printl a;
   fun showB(n) {
      printl a;
      printl b;
      b = n;
   }
   showB("next one");
   var b = "innerBlock";
   showB("another one");
   showB("")
  }
  showA();
  var a = "block";
  showA();
}
var monday = true
if (monday && true) var croissant = "yes";

print croissant;
