//@memo(n)
// fun fib(n) {
//   if (n < 2) return n;
//   return fib(n - 1) + fib(n - 2); 
// }

// tail recursive fibonacci
fun fib(n) {
    // memo needs this for the first call
    var i = n;
    var a = 0; 
    var b = 1;
    // @memo(i, a, b)
    fun tailfib(i,a,b) {
        if (i == 0) {
            return a;
        } else {
            return tailfib(i-1, a + b, a);
        }
    }
    return tailfib(n, a, b);
}

var before = clock();
printl fib(0);
printl fib(1);
printl fib(2);
printl fib(3);
printl fib(4);
printl fib(5);
printl fib(6);
printl fib(7);
printl fib(8);
printl fib(9);
printl fib(10);
printl fib(15);
printl fib(20);
printl fib(25);
printl fib(40);
var after = clock();
print "clock: ";
printl after - before;
